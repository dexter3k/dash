package opcodes

type Opcode struct {
	Name   string
	Args   []Arg
	Effect *StackEffect
}

func init() {
	for k, _ := range Opcodes {
		op := Opcodes[k]
		op.Name = Names[k]
		op.Args = Arguments[k]
		op.Effect = StackEffects[k]
	}
}

var Opcodes = map[uint8]*Opcode{
	Breakpoint:             &Opcode{},
	NoOperation:            &Opcode{},
	Throw:                  &Opcode{},
	GetSuper:               &Opcode{},
	SetSuper:               &Opcode{},
	SetDefaultXmlSpace:     &Opcode{},
	SetDefaultXmlSpaceLate: &Opcode{},
	EraseLocal:             &Opcode{},
	Label:                  &Opcode{},
	LoadFloat16:            &Opcode{},
	StoreFloat16:           &Opcode{},
	IfNotLessThan:          &Opcode{},
	IfNotLessEqual:         &Opcode{},
	IfNotGreaterThan:       &Opcode{},
	IfNotGreaterEqual:      &Opcode{},
	Jump:                   &Opcode{},
	IfTrue:                 &Opcode{},
	IfFalse:                &Opcode{},
	IfEqual:                &Opcode{},
	IfNotEqual:             &Opcode{},
	IfLessThan:             &Opcode{},
	IfLessEqual:            &Opcode{},
	IfGreaterThan:          &Opcode{},
	IfGreaterEqual:         &Opcode{},
	IfStrictEqual:          &Opcode{},
	IfStrictNotEqual:       &Opcode{},
	LookupSwitch:           &Opcode{},
	PushWithScope:          &Opcode{},
	PopScope:               &Opcode{},
	GetNameOfNextProperty:  &Opcode{},
	GetNextPropertyIndex:   &Opcode{},
	PushNull:               &Opcode{},
	PushUndefined:          &Opcode{},
	PushFloat32:            &Opcode{},
	GetValueOfNextProperty: &Opcode{},
	PushInt8:               &Opcode{},
	PushInt16:              &Opcode{},
	PushTrue:               &Opcode{},
	PushFalse:              &Opcode{},
	PushNotANumber:         &Opcode{},
	Pop:                    &Opcode{},
	Duplicate:              &Opcode{},
	Swap:                   &Opcode{},
	PushString:             &Opcode{},
	PushInt:                &Opcode{},
	PushUint:               &Opcode{},
	PushNumber:             &Opcode{},
	PushScope:              &Opcode{},
	PushNamespace:          &Opcode{},
	GetNextPropertyOnLocal: &Opcode{},
	LoadInt8:               &Opcode{},
	LoadInt16:              &Opcode{},
	LoadInt32:              &Opcode{},
	LoadFloat32:            &Opcode{},
	LoadFloat64:            &Opcode{},
	StoreInt8:              &Opcode{},
	StoreInt16:             &Opcode{},
	StoreInt32:             &Opcode{},
	StoreFloat32:           &Opcode{},
	StoreFloat64:           &Opcode{},
	NewFunction:            &Opcode{},
	Call:                   &Opcode{},
	Construct:              &Opcode{},
	CallMethod:             &Opcode{},
	CallStatic:             &Opcode{},
	CallSuper:              &Opcode{},
	CallProperty:           &Opcode{},
	ReturnVoid:             &Opcode{},
	ReturnValue:            &Opcode{},
	ConstructSuper:         &Opcode{},
	ConstructProperty:      &Opcode{},
	FindAndCallProperty:    &Opcode{},
	CallSuperVoid:          &Opcode{},
	CallPropertyVoid:       &Opcode{},
	SignExtend1To32:        &Opcode{},
	SignExtend8To32:        &Opcode{},
	SignExtend16To32:       &Opcode{},
	ApplyVectorType:        &Opcode{},
	PushFloat16:            &Opcode{},
	NewObject:              &Opcode{},
	NewArray:               &Opcode{},
	NewActivation:          &Opcode{},
	NewClass:               &Opcode{},
	GetDescendants:         &Opcode{},
	NewCatch:               &Opcode{},
	FindPropertyStrict:     &Opcode{},
	FindProperty:           &Opcode{},
	FindScriptDefinition:   &Opcode{},
	FindAndGetProperty:     &Opcode{},
	SetProperty:            &Opcode{},
	GetLocal:               &Opcode{},
	SetLocal:               &Opcode{},
	GetGlobalScope:         &Opcode{},
	GetScopeObject:         &Opcode{},
	GetProperty:            &Opcode{},
	GetOuterScope:          &Opcode{},
	InitProperty:           &Opcode{},
	DeleteProperty:         &Opcode{},
	GetSlot:                &Opcode{},
	SetSlot:                &Opcode{},
	GetGlobalSlot:          &Opcode{},
	SetGlobalSlot:          &Opcode{},
	ConvertToString:        &Opcode{},
	EscapeXmlElement:       &Opcode{},
	EscapeXmlAttribute:     &Opcode{},
	ConvertToInteger:       &Opcode{},
	ConvertToUnsigned:      &Opcode{},
	ConvertToNumber:        &Opcode{},
	ConvertToBoolean:       &Opcode{},
	ConvertToObject:        &Opcode{},
	CheckFilter:            &Opcode{},
	ConvertToFloat32:       &Opcode{},
	UnaryPlusOperator:      &Opcode{},
	ConvertToFloat16:       &Opcode{},
	CoerceToType:           &Opcode{},
	CoerceToBoolean:        &Opcode{},
	CoerceToAny:            &Opcode{},
	CoerceToInteger:        &Opcode{},
	CoerceToNumber:         &Opcode{},
	CoerceToString:         &Opcode{},
	CheckType:              &Opcode{},
	CheckTypeLate:          &Opcode{},
	CoerceToUnsigned:       &Opcode{},
	CoerceToObject:         &Opcode{},
	Negate:                 &Opcode{},
	Increment:              &Opcode{},
	IncrementLocal:         &Opcode{},
	Decrement:              &Opcode{},
	DecrementLocal:         &Opcode{},
	GetTypeName:            &Opcode{},
	BooleanNot:             &Opcode{},
	BitwiseNot:             &Opcode{},
	Add:                    &Opcode{},
	Subtract:               &Opcode{},
	Multiply:               &Opcode{},
	Divide:                 &Opcode{},
	Modulo:                 &Opcode{},
	ShiftLeft:              &Opcode{},
	ShiftRightSigned:       &Opcode{},
	ShiftRightUnsigned:     &Opcode{},
	BitwiseAnd:             &Opcode{},
	BitwiseOr:              &Opcode{},
	BitwiseXor:             &Opcode{},
	CompareEquals:          &Opcode{},
	CompareStrictEquals:    &Opcode{},
	CompareLessThan:        &Opcode{},
	CompareLessEquals:      &Opcode{},
	CompareGreaterThan:     &Opcode{},
	CompareGreaterEquals:   &Opcode{},
	InstanceOf:             &Opcode{},
	IsObjectOfType:         &Opcode{},
	IsObjectOfTypeLate:     &Opcode{},
	ObjectHasProperty:      &Opcode{},
	IncrementInteger:       &Opcode{},
	DecrementInteger:       &Opcode{},
	IncrementLocalInteger:  &Opcode{},
	DecrementLocalInteger:  &Opcode{},
	NegateInteger:          &Opcode{},
	AddInteger:             &Opcode{},
	SubtractInteger:        &Opcode{},
	MultiplyInteger:        &Opcode{},
	GetLocal_0:             &Opcode{},
	GetLocal_1:             &Opcode{},
	GetLocal_2:             &Opcode{},
	GetLocal_3:             &Opcode{},
	SetLocal_0:             &Opcode{},
	SetLocal_1:             &Opcode{},
	SetLocal_2:             &Opcode{},
	SetLocal_3:             &Opcode{},
	Debug:                  &Opcode{},
	DebugLine:              &Opcode{},
	DebugFile:              &Opcode{},
	BreakpointLine:         &Opcode{},
	Timestamp:              &Opcode{},
}
