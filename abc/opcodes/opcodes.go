package opcodes

// ingored: interpreted and just skipped with any arguments
// unsupported: handled as unknown op, here for clarity that
// instruction exists, but not for normal AVM2 release
const (
	BadOpcode              = 0x00 // unsupported
	Breakpoint             = 0x01 // unsupported
	NoOperation            = 0x02 // ignored
	Throw                  = 0x03
	GetSuper               = 0x04
	SetSuper               = 0x05
	SetDefaultXmlSpace     = 0x06 // aka dxns
	SetDefaultXmlSpaceLate = 0x07 // aka dxnslate
	EraseLocal             = 0x08 // aka kill
	Label                  = 0x09 // ignored
	LoadFloat16            = 0x0A // aka lf32x4, unsupported
	StoreFloat16           = 0x0B // aka sf32x4, unsupported
	IfNotLessThan          = 0x0C // aka ifnlt
	IfNotLessEqual         = 0x0D // aka ifnle
	IfNotGreaterThan       = 0x0E // aka ifngt
	IfNotGreaterEqual      = 0x0F // aka ifnge
	Jump                   = 0x10
	IfTrue                 = 0x11
	IfFalse                = 0x12
	IfEqual                = 0x13 // aka ifeq
	IfNotEqual             = 0x14 // aka ifne
	IfLessThan             = 0x15 // aka iflt
	IfLessEqual            = 0x16 // aka ifle
	IfGreaterThan          = 0x17 // aka ifgt
	IfGreaterEqual         = 0x18 // aka ifge
	IfStrictEqual          = 0x19
	IfStrictNotEqual       = 0x1A
	LookupSwitch           = 0x1B
	PushWithScope          = 0x1C
	PopScope               = 0x1D
	GetNameOfNextProperty  = 0x1E // aka nextName
	GetNextPropertyIndex   = 0x1F // aka hasNext
	PushNull               = 0x20
	PushUndefined          = 0x21
	PushFloat32            = 0x22 // aka pushFloat, unsupported
	GetValueOfNextProperty = 0x23 // aka nextValue
	PushInt8               = 0x24 // aka pushByte, data in u8, sign extended
	PushInt16              = 0x25 // aka pushShort, data in u30, sign extended
	PushTrue               = 0x26
	PushFalse              = 0x27
	PushNotANumber         = 0x28 // aka pushNaN
	Pop                    = 0x29
	Duplicate              = 0x2A // aka dup
	Swap                   = 0x2B
	PushString             = 0x2C // strings[u30]
	PushInt                = 0x2D // ints[u30]
	PushUint               = 0x2E // uints[u30]
	PushNumber             = 0x2F // aka pushdouble
	PushScope              = 0x30
	PushNamespace          = 0x31
	GetNextPropertyOnLocal = 0x32 // aka hasnext2
	NonExistingOpcode_33   = 0x33 // pushdecimal, long gone from avm
	NonExistingOpcode_34   = 0x34 // pushdnan, long gone from avm
	LoadInt8               = 0x35 // aka li8
	LoadInt16              = 0x36 // aka li16
	LoadInt32              = 0x37 // aka li32
	LoadFloat32            = 0x38 // aka lf32
	LoadFloat64            = 0x39 // aka lf64
	StoreInt8              = 0x3A // aka si8
	StoreInt16             = 0x3B // aka si16
	StoreInt32             = 0x3C // aka si32
	StoreFloat32           = 0x3D // aka sf32
	StoreFloat64           = 0x3E // aka sf64
	NonExistingOpcode_3F   = 0x3F
	NewFunction            = 0x40
	Call                   = 0x41
	Construct              = 0x42
	CallMethod             = 0x43
	CallStatic             = 0x44
	CallSuper              = 0x45
	CallProperty           = 0x46
	ReturnVoid             = 0x47
	ReturnValue            = 0x48
	ConstructSuper         = 0x49
	ConstructProperty      = 0x4A
	NonExistingOpcode_4B   = 0x4B // callsuperid, long gone from avm
	FindAndCallProperty    = 0x4C // aka callproplex
	NonExistingOpcode_4D   = 0x4D // callinterface, long gone from avm
	CallSuperVoid          = 0x4E
	CallPropertyVoid       = 0x4F
	SignExtend1To32        = 0x50 // aka sxi1
	SignExtend8To32        = 0x51 // aka sxi8
	SignExtend16To32       = 0x52 // aka sxi16
	ApplyVectorType        = 0x53 // aka applytype, only allowed on Vector
	PushFloat16            = 0x54 // aka pushfloat4, unsupported
	NewObject              = 0x55
	NewArray               = 0x56
	NewActivation          = 0x57
	NewClass               = 0x58
	GetDescendants         = 0x59
	NewCatch               = 0x5A
	NonExistingOpcode_5B   = 0x5B // findpropglobalstrict
	NonExistingOpcode_5C   = 0x5C // findpropglobal
	FindPropertyStrict     = 0x5D
	FindProperty           = 0x5E
	FindScriptDefinition   = 0x5F // aka finddef
	FindAndGetProperty     = 0x60 // aka getlex
	SetProperty            = 0x61
	GetLocal               = 0x62
	SetLocal               = 0x63
	GetGlobalScope         = 0x64
	GetScopeObject         = 0x65
	GetProperty            = 0x66
	GetOuterScope          = 0x67
	InitProperty           = 0x68
	NonExistingOpcode_69   = 0x69
	DeleteProperty         = 0x6A
	NonExistingOpcode_6B   = 0x6B
	GetSlot                = 0x6C
	SetSlot                = 0x6D
	GetGlobalSlot          = 0x6E
	SetGlobalSlot          = 0x6F
	ConvertToString        = 0x70 // aka convert_s
	EscapeXmlElement       = 0x71 // aka esc_xelem
	EscapeXmlAttribute     = 0x72 // aka esc_xattr
	ConvertToInteger       = 0x73 // aka convert_i
	ConvertToUnsigned      = 0x74 // aka convert_u
	ConvertToNumber        = 0x75 // aka convert_d
	ConvertToBoolean       = 0x76 // aka convert_b
	ConvertToObject        = 0x77 // aka convert_o
	CheckFilter            = 0x78
	ConvertToFloat32       = 0x79 // aka convert_f, unsupported
	UnaryPlusOperator      = 0x7A // aka unplus, unsupported
	ConvertToFloat16       = 0x7B // aka convert_f4, unsupported
	NonExistingOpcode_7C   = 0x7C
	NonExistingOpcode_7D   = 0x7D
	NonExistingOpcode_7E   = 0x7E
	NonExistingOpcode_7F   = 0x7F
	CoerceToType           = 0x80 // aka coerce
	CoerceToBoolean        = 0x81 // aka coerce_b
	CoerceToAny            = 0x82 // aka coerce_a, ignored
	CoerceToInteger        = 0x83 // aka coerce_i
	CoerceToNumber         = 0x84 // aka coerce_d
	CoerceToString         = 0x85 // aka coerce_s
	CheckType              = 0x86 // aka astype
	CheckTypeLate          = 0x87 // aka astypelate
	CoerceToUnsigned       = 0x88 // aka coerce_u
	CoerceToObject         = 0x89 // aka coerce_o
	NonExistingOpcode_8A   = 0x8A
	NonExistingOpcode_8B   = 0x8B
	NonExistingOpcode_8C   = 0x8C
	NonExistingOpcode_8D   = 0x8D
	NonExistingOpcode_8E   = 0x8E
	NonExistingOpcode_8F   = 0x8F
	Negate                 = 0x90
	Increment              = 0x91
	IncrementLocal         = 0x92 // aka inclocal
	Decrement              = 0x93
	DecrementLocal         = 0x94 // aka declocal
	GetTypeName            = 0x95 // aka typeof
	BooleanNot             = 0x96 // aka not
	BitwiseNot             = 0x97 // aka bitnot
	NonExistingOpcode_98   = 0x98
	NonExistingOpcode_99   = 0x99
	NonExistingOpcode_9A   = 0x9A
	NonExistingOpcode_9B   = 0x9B
	NonExistingOpcode_9C   = 0x9C
	NonExistingOpcode_9D   = 0x9D
	NonExistingOpcode_9E   = 0x9E
	NonExistingOpcode_9F   = 0x9F
	Add                    = 0xA0
	Subtract               = 0xA1
	Multiply               = 0xA2
	Divide                 = 0xA3
	Modulo                 = 0xA4
	ShiftLeft              = 0xA5 // aka lshift
	ShiftRightSigned       = 0xA6 // aka rshift
	ShiftRightUnsigned     = 0xA7 // aka urshift
	BitwiseAnd             = 0xA8 // aka bitand
	BitwiseOr              = 0xA9 // aka bitor
	BitwiseXor             = 0xAA // aka bitxor
	CompareEquals          = 0xAB // aka equals
	CompareStrictEquals    = 0xAC // aka strictequals
	CompareLessThan        = 0xAD // aka lessthan
	CompareLessEquals      = 0xAE // aka lessequals
	CompareGreaterThan     = 0xAF // aka greaterthan
	CompareGreaterEquals   = 0xB0 // aka greaterequals
	InstanceOf             = 0xB1
	IsObjectOfType         = 0xB2 // aka istype
	IsObjectOfTypeLate     = 0xB3 // aka istypelate
	ObjectHasProperty      = 0xB4 // aka in
	NonExistingOpcode_B5   = 0xB5
	NonExistingOpcode_B6   = 0xB6
	NonExistingOpcode_B7   = 0xB7
	NonExistingOpcode_B8   = 0xB8
	NonExistingOpcode_B9   = 0xB9
	NonExistingOpcode_BA   = 0xBA
	NonExistingOpcode_BB   = 0xBB
	NonExistingOpcode_BC   = 0xBC
	NonExistingOpcode_BD   = 0xBD
	NonExistingOpcode_BE   = 0xBE
	NonExistingOpcode_BF   = 0xBF
	IncrementInteger       = 0xC0 // aka increment_i
	DecrementInteger       = 0xC1 // aka decrement_i
	IncrementLocalInteger  = 0xC2 // aka inclocal_i
	DecrementLocalInteger  = 0xC3 // aka declocal_i
	NegateInteger          = 0xC4 // aka negate_i
	AddInteger             = 0xC5 // aka add_i
	SubtractInteger        = 0xC6 // aka subtract_i
	MultiplyInteger        = 0xC7 // aka multiply_i
	NonExistingOpcode_C8   = 0xC8
	NonExistingOpcode_C9   = 0xC9
	NonExistingOpcode_CA   = 0xCA
	NonExistingOpcode_CB   = 0xCB
	NonExistingOpcode_CC   = 0xCC
	NonExistingOpcode_CD   = 0xCD
	NonExistingOpcode_CE   = 0xCE
	NonExistingOpcode_CF   = 0xCF
	GetLocal_0             = 0xD0
	GetLocal_1             = 0xD1
	GetLocal_2             = 0xD2
	GetLocal_3             = 0xD3
	SetLocal_0             = 0xD4
	SetLocal_1             = 0xD5
	SetLocal_2             = 0xD6
	SetLocal_3             = 0xD7
	NonExistingOpcode_D8   = 0xD8
	NonExistingOpcode_D9   = 0xD9
	NonExistingOpcode_DA   = 0xDA
	NonExistingOpcode_DB   = 0xDB
	NonExistingOpcode_DC   = 0xDC
	NonExistingOpcode_DD   = 0xDD
	NonExistingOpcode_DE   = 0xDE
	NonExistingOpcode_DF   = 0xDF
	NonExistingOpcode_E0   = 0xE0
	NonExistingOpcode_E1   = 0xE1
	NonExistingOpcode_E2   = 0xE2
	NonExistingOpcode_E3   = 0xE3
	NonExistingOpcode_E4   = 0xE4
	NonExistingOpcode_E5   = 0xE5
	NonExistingOpcode_E6   = 0xE6
	NonExistingOpcode_E7   = 0xE7
	NonExistingOpcode_E8   = 0xE8
	NonExistingOpcode_E9   = 0xE9
	NonExistingOpcode_EA   = 0xEA
	NonExistingOpcode_EB   = 0xEB
	NonExistingOpcode_EC   = 0xEC
	NonExistingOpcode_ED   = 0xED
	NonExistingOpcode_EE   = 0xEE
	Debug                  = 0xEF // ignored
	DebugLine              = 0xF0 // ignored
	DebugFile              = 0xF1 // ignored
	BreakpointLine         = 0xF2 // unsupported
	Timestamp              = 0xF3 // unsupported
	NonExistingOpcode_F4   = 0xF4
	NonExistingOpcode_F5   = 0xF5
	NonExistingOpcode_F6   = 0xF6
	NonExistingOpcode_F7   = 0xF7
	NonExistingOpcode_F8   = 0xF8
	NonExistingOpcode_F9   = 0xF9
	NonExistingOpcode_FA   = 0xFA
	NonExistingOpcode_FB   = 0xFB
	NonExistingOpcode_FC   = 0xFC
	NonExistingOpcode_FD   = 0xFD
	NonExistingOpcode_FE   = 0xFE
	NonExistingOpcode_FF   = 0xFF
)
